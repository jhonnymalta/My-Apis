@page "/categoria"

@inject HttpClient http



<h3>Index</h3>
<a class="btn btn-primary" href="/categoria/createcategory" >Criar Nova Categoria</a>
 
@if (categorias == null)
{
    <p><em>Carregando..</em></p>
}else if(categorias.Count == 0)
{
    <p><em>Ainda não existem categorias cadastradas</em></p>
}
else
{
    <table class="table">
  <thead>
    <tr>
      <th scope="col">Categoria</th>
      <th scope="col">Descrição</th>
      <th scope="col">Editar</th>
      <th scope="col">Deletar</th>
    </tr>
  </thead>
  <tbody>
   @foreach (var categoria in categorias.categoria)
  {
      <tr>
          <td>@categoria.Name</td>
          <td>@categoria.ShortDescription</td>
          <td><a class="btn btn-primary" href="categoria/edit/@categoria.CategoryId">Editar</a></td>
          <td><a class="btn btn-danger" @onclick="(()=>DeletarCategoria(categoria.CategoryId))"  >Deletar</a></td>
          
      </tr>
  }
  </tbody>
</table>
<Pagination count="@categorias.Count" page="categorias.Page" ></Pagination>
}




@code {
    [Parameter]
    public int categoriaId { get; set; }

    [Parameter]
    public int page { get; set; } = 2;



    PaginationResultViewModel categorias{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CarregaCategorias();
       
    }
    async Task CarregaCategorias()
    {
        categorias = await http.GetFromJsonAsync<PaginationResultViewModel>("https://localhost:7082/categoria");
         InvokeAsync(() =>  StateHasChanged());
    }
   



    async void DeletarCategoria(int categoriaId)
    {
        await http.DeleteAsync($"https://localhost:7082/categoria/{categoriaId}");
        CarregaCategorias();
    }

}
